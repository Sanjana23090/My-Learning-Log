MY LEARNING

1. Comments
	1. Comments are the text which we write inside a Python program or a Python script, which is usually ignored by the computer so the 			Python doesn't analyze it or parses it. It's also not generally stored in memory or bytecode. 
	2. The sole purpose of using comments is first to help others understand our code better, and second is to define what that particular 			code does, and third is to see how the program works when a certain part of code is commented out, like to see the test cases, etc. 	
	3. comments can be created by starting it with a hash symbol. If you want multi-line comments, then you could use a hash at the start of 		each line, or else many people use multi-line strings as a comment for multi-line comments as well, because multi-line strings, when 		they are not assigned to any variable, Python generally ignores them. 
	4. But the sole difference is that they will be parsed by Python, and they will be stored in the memory and bytecode also. So the optimal 		way to use comments is by using hash symbol. Using multi-line strings can take up unnecessary memory, and it's not optimal to use 		that as it is not memory efficient.

2. Variables
	1. Variables in Python were slightly different to how we perceive variables in other programming languages like C or Java. In C or Java, 			variables are considered as a box which holds some contents like values inside it. So, the box which means the variable has a type. So, 		only that type of values are allowed to be put inside that. 
	2. In Python, variables are like name tags assigned to the values like generally variables are used to store any values temporarily so that 		instead of Using the value repeatedly, you can use variables to perform operations or anything as such. So name tag model means the 		variable here doesn't consider to be a box, but instead the value, when we assign a value to a variable, only then will the variable will 		be created.
	3. The value will be considered as an object and the value will be separately stored inside the memory and there will be a memory 				address for it. So when we give the variable name, the variable name instead points to the value. That means it points to the memory 		address of the value where it's stored in the memory. 
	4. There are certain rules to name a variable. It should not start with numbers or special characters. It should start with either an 				alphabet or an underscore. And the second rule is it should not have any special characters inside it. Only alphabets and numbers are 		allowed inside a variable name. And variable name should not be of any keyword which is predefined in Python.

3. Numeric Datatype
	1. We have numeric data type in Python. It has int, float, and complex. Int refers to the integers, which can be positive, negative, whole 			numbers, without any decimal point. So, integers are generally considered to be int in Python. So, we do not need to mention the data 		type in Python as it's an inferred language. Based on the value, it automatically determines the type of the value during the runtime. 	2. As Python is a dynamically typed language, we have int function, which converts anything into an integer. Anything in the sense, it can 		help convert float numbers to an integer by truncating the decimal part. And it can also convert numeric strings into an integer. But if 		you try to convert a non-numeric string which has text into an integer, then it might throw an error. 
	3. And then we have float. Float is similar to interior but it has a decimal point. All numbers with a decimal point are considered to be 			float. We have float function which converts anything into a floating point value. They are more precise and includes all the decimal 		parts as well. 
	4. We have complex numbers in Python, a numeric data type. Complex has real part and imaginary part as well. They have typically have 		this structure like 5 + 4j, real number plus imaginary part. We have complex function where we could consider or converting 				anything into a complex number. But the main point here is complex numbers cannot be converted to any other type.

4. Booleans
	 Boolean represents two values, either true or false. It's basically used to make decisions or check conditions based on logic etc. It even functions return boolean values like if we check any logical expression so then it automatically returns either true or false. They are case sensitive so we should make sure that we use the correct syntax and boolean values are mostly evaluated to be true like even if there are if the given type has some content inside it it evaluates to true but if there is zero or if the given list string or anything is empty then it gets evaluated to false and also the false in boolean it also gets evaluated to false. These are done using the valuation of the type will be done using the bool function. If we give any empty string or something inside the bool function it gets evaluated to false.

5. Operators
	1. Operators in Python, they are used to perform operations on variables or values. There are many different types of operators. 
	2. First category is arithmetic operation, arithmetic operators, which have addition, which adds two numbers, minus, which subtracts 			two numbers, multiplication, which multiplies numbers, division, which performs division operation, and we have modulus, which 			gives the remainder of the division, we have floor division, which truncates the decimal part of the division, and we have exponent, 		which gives the exponent of the given value. 
	3. next category is comparison operators. They are often evaluated to either true or false. We have less than, less than equal to, greater 		than, greater than or equal to, equal to, not equal to, these types of operators. Number three is logical operator, where we have and, 		or, not.
	4. Bitwise operator, we have and, or, not, etc., like left shift, right shift that performs bitwise operations. 
	5. membership operators, which are used to check if the given sequence or like if the given character is present in the given object or not. 		We have in and not in. In gets evaluated to true if the given character is present in the object or not. 
	6. Then we have identity operator, where we have is and is not. Is evaluates to true if both of them refers to the same object in the 				memory, and they are false if they are not evaluated to the same memory location. It doesn't check values, but instead it checks the 		memory location.

6. If-else
	1. If-else are known as conditional statements in Python. They are used to check a condition. Whenever we try to make decisions or we 			need to check conditions based on logic, we use if-else. 
	2. If in if we write a condition which we would like to check and if the condition evaluates to true then we'll proceed to the body of the if 		but if it's not true then we'll go to the else part and the else will get executed if the if condition is turned out to be false. We also have 		elif where if the condition if we have more than one condition which we would like to check then we use elif. 
	3. If the condition in if turned out to be false only then will it continue to check elif and if the condition of elif turned out to be true then it 		gets executed and comes out of the statement but even if it's turned out to be false only then will the else part be executed. 
	4. We also have Nested if statements where we would like to check two conditions which are like two or three conditions which are 			dependent on each other like first we want to check the number is positive or not and then check it's even or not and then we need a 		number which is both positive and even so to check that we are using negative we are using the nested if here first is if the number is 		greater than zero only then will it continue to check the conditions inside it

MY REFLECTIONS

From what I have learned today, I was honestly confused by a few things, but then got to know the internal implementations. Like, I used to think that variables are considered to be a box, but here we don't use data types in Python explicitly. So, I was confused a bit. Then later, I got to know that they are just used as name tags, in the sense the variable doesn't have a type, but only the value will be having a type, and the computer or compiler will know it during the runtime. And the second thing is, I was a little confused to write shorthand if-else, when there are multiple conditions to check. And the third thing which I felt somewhat difficult is to understand this object reusing part, where Python, it checks if it's a immutable type like empty jar, and the object is already present, then it will make sure the variables are all pointing to the same object. But like, in the sense it's reusing the object instead of creating multiple objects of the same value. But if it's immutable, then it makes sure it creates separate objects even though they have the same value. So, that's called object interning or object reusing. I got to know it today.